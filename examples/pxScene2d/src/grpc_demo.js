"use strict";

px.import({
  grpc: 'grpc',
  google_protobuf: 'google-protobuf'
})

.then(imports => {




  /**
   * =====================
   * helloworld_pb.js
   * =====================
   */

  // GENERATED CODE -- DO NOT EDIT!

  var jspb = imports.google_protobuf;
  var goog = jspb;
  var helloworld = {};


  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  helloworld.HelloRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(helloworld.HelloRequest, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    helloworld.HelloRequest.displayName = 'proto.helloworld.HelloRequest';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    helloworld.HelloRequest.prototype.toObject = function(opt_includeInstance) {
      return helloworld.HelloRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.helloworld.HelloRequest} msg The msg instance to transform.
     * @return {!Object}
     */
    helloworld.HelloRequest.toObject = function(includeInstance, msg) {
      var f, obj = {
        name: msg.getName()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.helloworld.HelloRequest}
   */
  helloworld.HelloRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new helloworld.HelloRequest;
    return helloworld.HelloRequest.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.helloworld.HelloRequest} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.helloworld.HelloRequest}
   */
  helloworld.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setName(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Class method variant: serializes the given message to binary data
   * (in protobuf wire format), writing to the given BinaryWriter.
   * @param {!proto.helloworld.HelloRequest} message
   * @param {!jspb.BinaryWriter} writer
   */
  helloworld.HelloRequest.serializeBinaryToWriter = function(message, writer) {
    message.serializeBinaryToWriter(writer);
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  helloworld.HelloRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the message to binary data (in protobuf wire format),
   * writing to the given BinaryWriter.
   * @param {!jspb.BinaryWriter} writer
   */
  helloworld.HelloRequest.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getName();
    if (f.length > 0) {
      writer.writeString(
        1,
        f
      );
    }
  };

  /**
   * Creates a deep clone of this proto. No data is shared with the original.
   * @return {!proto.helloworld.HelloRequest} The clone.
   */
  helloworld.HelloRequest.prototype.cloneMessage = function() {
    return /** @type {!proto.helloworld.HelloRequest} */ (jspb.Message.cloneMessage(this));
  };

  /**
   * optional string name = 1;
   * @return {string}
   */
  helloworld.HelloRequest.prototype.getName = function() {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
  };

  /** @param {string} value  */
  helloworld.HelloRequest.prototype.setName = function(value) {
    jspb.Message.setField(this, 1, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  helloworld.HelloReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(helloworld.HelloReply, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    helloworld.HelloReply.displayName = 'proto.helloworld.HelloReply';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    helloworld.HelloReply.prototype.toObject = function(opt_includeInstance) {
      return helloworld.HelloReply.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.helloworld.HelloReply} msg The msg instance to transform.
     * @return {!Object}
     */
    helloworld.HelloReply.toObject = function(includeInstance, msg) {
      var f, obj = {
        message: msg.getMessage()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.helloworld.HelloReply}
   */
  helloworld.HelloReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new helloworld.HelloReply;
    return helloworld.HelloReply.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.helloworld.HelloReply} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.helloworld.HelloReply}
   */
  helloworld.HelloReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setMessage(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Class method variant: serializes the given message to binary data
   * (in protobuf wire format), writing to the given BinaryWriter.
   * @param {!proto.helloworld.HelloReply} message
   * @param {!jspb.BinaryWriter} writer
   */
  helloworld.HelloReply.serializeBinaryToWriter = function(message, writer) {
    message.serializeBinaryToWriter(writer);
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  helloworld.HelloReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the message to binary data (in protobuf wire format),
   * writing to the given BinaryWriter.
   * @param {!jspb.BinaryWriter} writer
   */
  helloworld.HelloReply.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getMessage();
    if (f.length > 0) {
      writer.writeString(
        1,
        f
      );
    }
  };

  /**
   * Creates a deep clone of this proto. No data is shared with the original.
   * @return {!proto.helloworld.HelloReply} The clone.
   */
  helloworld.HelloReply.prototype.cloneMessage = function() {
    return /** @type {!proto.helloworld.HelloReply} */ (jspb.Message.cloneMessage(this));
  };

  /**
   * optional string message = 1;
   * @return {string}
   */
  helloworld.HelloReply.prototype.getMessage = function() {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
  };

  /** @param {string} value  */
  helloworld.HelloReply.prototype.setMessage = function(value) {
    jspb.Message.setField(this, 1, value);
  };




  /**
   * =====================
   * helloworld_grpc_pb.js
   * =====================
   */

  // GENERATED CODE -- DO NOT EDIT!

  var grpc = imports.grpc;

  function serialize_HelloReply(arg) {
    if (!(arg instanceof helloworld.HelloReply)) {
      throw new Error('Expected argument of type HelloReply');
    }
    return new Buffer(arg.serializeBinary());
  }

  function deserialize_HelloReply(buffer_arg) {
    return helloworld.HelloReply.deserializeBinary(new Uint8Array(buffer_arg));
  }

  function serialize_HelloRequest(arg) {
    if (!(arg instanceof helloworld.HelloRequest)) {
      throw new Error('Expected argument of type HelloRequest');
    }
    return new Buffer(arg.serializeBinary());
  }

  function deserialize_HelloRequest(buffer_arg) {
    return helloworld.HelloRequest.deserializeBinary(new Uint8Array(buffer_arg));
  }

  // The greeting service definition.
  var GreeterService = {
    // Sends a greeting
    sayHello: {
      path: '/helloworld.Greeter/SayHello',
      requestStream: false,
      responseStream: false,
      requestType: helloworld.HelloRequest,
      responseType: helloworld.HelloReply,
      requestSerialize: serialize_HelloRequest,
      requestDeserialize: deserialize_HelloRequest,
      responseSerialize: serialize_HelloReply,
      responseDeserialize: deserialize_HelloReply,
    },
  };

  const GreeterClient = grpc.makeGenericClientConstructor(GreeterService);




  /**
   * ======
   * Client
   * ======
   */

  function client_main() {
    var client = new GreeterClient('localhost:50051', grpc.credentials.createInsecure());
    var request = new helloworld.HelloRequest();
    var user;
    if (process.argv.length >= 3) {
      user = process.argv[2];
    } else {
      user = 'world';
    }
    request.setName(user);
    var arg1 = new Function("err", "response","console.log('Err:', err);console.log('Greeting:', response.getMessage());");
    client.sayHello(request, arg1);
  }

  client_main();

}).catch(e => console.warn(`Imports failed: ${e}`));
